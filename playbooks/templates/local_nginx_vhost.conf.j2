#Farooq Template
{% block server_redirect %}
{% if item.server_name_redirect is defined %}
server {
    listen       {{ item.listen | default('80') }};
    server_name  {{ item.server_name_redirect }};
    return       301 $scheme://{{ item.server_name.split(' ')[0] }}$request_uri;
}
{% endif %}
{% endblock %}

server {
    {% block server_begin %}{% endblock %}

    {% block server_basic -%}
    listen {{ item.listen | default('80') }};
    listen [::]:{{ item.listen | default('80') }};

{%- if item.server_name is defined %}
    server_name {{ item.server_name }};
{% endif %}

{%- if item.root is defined %}
    root {{ item.root }};
{% endif %}

{%- if item.index is defined %}
    index {{ item.index | default('index.html index.htm') }};
{% endif %}


{%- if item.error_page is defined %}
    error_page {{ item.error_page }};
{% endif %}

{%- if item.access_log is defined %}
    access_log {{ item.access_log }};
{% endif %}

{%- if item.error_log is defined %}
    error_log {{ item.error_log }} error;
{% endif %}

{%- if item.return is defined %}
    return {{ item.return }};
{% endif %}

{% endblock %}

{% block server_end %}{% endblock %}

{%- if item.extra_parameters is defined %}
    {{ item.extra_parameters|indent(4) }}
{% endif %}

{%- if 'ssl' in item.listen %}
    # Generated on Mozilla
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=nginx-1.14.0&openssl=1.0.1e&hsts=yes&profile=intermediate

  # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate {{ ssl_certificate_cert_path }}/{{ ssl_certificate_file}};
    ssl_certificate_key {{ ssl_certificate_key_path }}/{{ ssl_certificate_key_file}};
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam {{ ssl_certificate_cert_path }}/{{ ssl_certificate_dhparam_file }};

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

{% if ssl_certificate_interm_file %}
   ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate {{ ssl_certificate_cert_path }}/{{ ssl_certificate_interm_file }};
{% else %}
   ## no intermediate defined
{% endif %}  

{% endif %}
}
