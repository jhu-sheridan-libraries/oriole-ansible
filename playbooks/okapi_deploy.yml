---
# Deploy okapi and modules for okapi
- hosts: oriole

  tasks:
    - name: get active modules
      set_fact:
        active_modules: "{{okapi_modules|selectattr('active')|list}}"

    - name: install python pip docker package
      become: yes
      pip:
        name: docker

    - name: db privilages 
      postgresql_privs:
        login_host: "{{ pg_host }}"
        login_user: "{{ pg_admin_user }}"
        login_password: "{{ pg_admin_password }}"
        db: "{{ okapidb_name }}"
        privs: ALL
        type: database
        role: "{{ okapidb_user }}"

    - name: create okapi conf, log dirs 
      become: true
      file:
        state: directory 
        path: "{{ item }}"
      with_items:
        - "{{ okapi_conf_dir }}"
        - "{{ okapi_log_dir }}"

    
    - name: config okapi container
      become: yes
      template: 
        src: okapi.conf.j2 
        dest: "{{ okapi_conf_dir }}/okapi.conf"
        #notify: restart okapi container

    - name: config okapi log4j
      become: yes
      template: 
        src: log4j.properties.j2
        dest: "{{ okapi_log4j_config }}"
        #notify: restart okapi container

    - name: create backend docker network
      become: yes
      docker_network:
        name: backend
        driver_options:
          com.docker.network.bridge.name: "{{ okapi_docker_network_name}}"

    - name: add new interface to trusted zone
      become: true
      firewalld:
        zone: 'trusted'
        interface: "{{ okapi_docker_network_name }}"
        permanent: 'yes'
        state: 'enabled'
        immediate: 'yes'

    - name: create the okapi container
      become: yes
      docker_container:
        name:  "okapi"
        image: "folioorg/okapi:{{ okapi_version }}"
        restart_policy: 'always'
        env:
          JAVA_OPTIONS: |
            -Xmx256m
            -Dloglevel=DEBUG
            -Dstorage=postgres
            -Dpostgres_host={{ hostname }}.{{ domainname }}
            -Dpostgres_port={{ pg_port }}
            -Dpostgres_user={{ okapidb_user }}
            -Dpostgres_password={{ okapidb_password }}
            -Dpostgres_database={{ okapidb_name }}
            -Dokapiurl={{ okapi_url }}
        exposed_ports:
          - '{{okapi_port_start}}-{{okapi_port_end}}'
          - "{{okapi_port}}"
        published_ports: 
          - "{{external_okapi_port}}:{{okapi_port}}"
        dns_servers: "{{ jhu_dns_servers }}"
        etc_hosts: "{{ docker_etc_hosts }}"
        hostname: "okapi"
        networks:
          - name: backend
        volumes:
          - "{{ okapi_conf_dir }}:{{okapi_conf_dir}}"
          - "{{ okapi_log_dir }}:{{ okapi_log_dir }}"
        command: "{{ okapi_role }}" 
      tags: indev

    - name: create okapi module contaienrs
      become: yes
      docker_container: 
        name:  "{{ item.name }}"
        image: "{{ ( item.docker_image | default( 'folioorg/' + item.name + ':' + item.version )) }}"
        env: "{{ item.env }}"
        exposed_ports: 8081
        dns_servers: "{{ jhu_dns_servers }}"
        etc_hosts: "{{ docker_etc_hosts }}"
        hostname: "{{ item.name }}"
        networks:
          - name: backend
      loop: "{{ active_modules|flatten(levels=1) }}"
